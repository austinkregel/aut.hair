<?php

namespace App\Services\Programming;

use App\Services\Code;
use Nette\PhpGenerator\Literal;
use Nette\PhpGenerator\Property;

class LaravelProgrammingStyle extends Code
{

    public function addListenerToEvent(string $eventName, string $listener)
    {
        // We need to find the event service provider
        // Then find the $listen property
        // then the index of the event
        // lastly add the listener to the array of listeners
        // and rebuild the file.
        $this->import([$listener, $eventName]);
        $this->modifyProperty('listen', function (Property $property) use ($eventName, $listener) {
            /** @var Literal $literal */
            $literal =  $property->getValue();
            // plan: Split the literal into chunks, look for the $eventName,
            // When $eventName is found, on the following line insert $listener with a trailing comma.

            $lineWithEvent = null;
            $content = explode("\n", $literal);

            if (count($content) <= 2) {
                throw new \DomainException('This EventServiceProvider needs to have at least 3 lines for the $listen');
            }

            $content = array_values(array_filter($content));

            foreach ($content as $lineNumber => $line) {
                if (str_contains($line, $eventName)) {
                    $lineWithEvent = $lineNumber;
                }
            }

            if ($lineWithEvent === null) {
                $content = array_merge(array_slice($content, 0, 1), [
                    // new line with our listener,
                    "    " . $this->formatClassWithClass($eventName) ." => [",
                    "        " . $this->formatClassWithClass($listener) .".'@handle', // code: this is an autogenerated line",
                    "    ],"
                ], array_slice($content, 1, count($content)));
            } else {
                $content = array_merge(array_slice($content, 0, $lineWithEvent+1), [
                    // new line with our listener,
                    "        " . $this->formatClassWithClass($listener) ." . '@handle', // code: this is an autogenerated line"
                ], array_slice($content, $lineWithEvent+1, count($content)));
            }

            $property->setValue((new Literal(implode("\n", $content))));
        });
        return $this;
    }
    public function formatClassWithClass(string $class)
    {
        return '/*(n*/'.$class."::class";
    }
}
