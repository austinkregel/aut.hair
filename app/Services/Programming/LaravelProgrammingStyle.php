<?php

namespace App\Services\Programming;

use App\Services\Code;
use Nette\PhpGenerator\Dumper;
use Nette\PhpGenerator\Literal;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PhpNamespace;
use Nette\PhpGenerator\Property;
use SebastianBergmann\Exporter\Exporter;
use Symfony\Component\VarDumper\VarDumper;
use Symfony\Component\VarExporter\VarExporter;

class LaravelProgrammingStyle extends Code
{
    public function addListenerToEvent(string $eventName, string $listener)
    {
        // We need to find the event service provider
        // Then find the $listen property
        // then the index of the event
        // lastly add the listener to the array of listeners
        // and rebuild the file.
        $this->import([$listener, $eventName]);
        $this->modifyProperty('listen', function (Property $property) use ($eventName, $listener) {
            /** @var Literal $literal */
            $literal = $property->getValue();
            // plan: Split the literal into chunks, look for the $eventName,
            // When $eventName is found, on the following line insert $listener with a trailing comma.

            $lineWithEvent = null;
            $content = explode("\n", $literal);

            if (count($content) <= 2) {
                throw new \DomainException('This EventServiceProvider needs to have at least 3 lines for the $listen');
            }

            $content = array_values(array_filter($content));

            foreach ($content as $lineNumber => $line) {
                if (str_contains($line, $eventName)) {
                    $lineWithEvent = $lineNumber;
                }
            }

            if ($lineWithEvent === null) {
                $content = array_merge(array_slice($content, 0, 1), [
                    // new line with our listener,
                    '    '.$this->formatClassWithClass($eventName).' => [',
                    '        '.$this->formatClassWithClass($listener).".'@handle', // code: this is an autogenerated line",
                    '    ],',
                ], array_slice($content, 1, count($content)));
            } else {
                $content = array_merge(array_slice($content, 0, $lineWithEvent + 1), [
                    // new line with our listener,
                    '        '.$this->formatClassWithClass($listener)." . '@handle', // code: this is an autogenerated line",
                ], array_slice($content, $lineWithEvent + 1, count($content)));
            }

            $property->setValue((new Literal(implode("\n", $content))));
        });

        return $this;
    }

    public function propertyContainsValue(string $propertyName, string $valueToLookFor)
    {
        /** @var PhpFile $file */
        foreach ($this->phpFiles as $file) {
            /** @var PhpNamespace $namespaceObject */
            foreach ($file->getNamespaces() as $namespace => $namespaceObject) {
                // Add code at the namespace level like use statements, declare(strict_types=1);
                /** @var \Nette\PhpGenerator\ClassType $class */
                foreach ($file->getClasses() as $class) {
                    /** @var \Nette\PhpGenerator\Property $property */
                    foreach ($class->getProperties() as $definedProperty => $property) {
                        if ($definedProperty === $propertyName) {
                            /** @var Literal $value */
                            $value = $property->getValue();

                            if (is_string($value) && str_contains($value, $valueToLookFor)) {
                                return true;
                            }
                            $value = $value->formatWith(new Dumper);

                            if (str_contains($value, $valueToLookFor)) {
                                return true;
                            }
                        }
                    }
                }
            }
        }

        return false;
    }

    public function removeListenerFromEvent(string $eventName, string $listener)
    {
        // We need to find the event service provider
        // Then find the $listen property
        // then the index of the event
        // lastly add the listener to the array of listeners
        // and rebuild the file.
        $this->removeImport([$listener]);
        $this->modifyProperty('listen', function (Property $property) use ($eventName, $listener) {
            /** @var Literal $literal */
            $literal = $property->getValue();
            // plan: Split the literal into chunks, look for the $eventName,
            // When $eventName is found, on the following line insert $listener with a trailing comma.

            $lineWithListener = null;
            $content = explode("\n", $literal);

            if (count($content) <= 2) {
                throw new \DomainException('This EventServiceProvider needs to have at least 3 lines for the $listen');
            }

            $content = array_values(array_filter($content));

            $eventLine = 0;
            $eventLineEnd = 0;
            foreach ($content as $lineNumber => $line) {
                if (str_contains($line, $eventName)) {
                    $eventLine = $lineNumber;
                }
                if (str_contains($line, $listener)) {
                    unset($content[$lineNumber]);
                    $lineWithListener = $lineNumber;
                }
                if ($eventLineEnd === 0 && $lineNumber > $lineWithListener  && str_contains($line, ']')) {
                    $eventLineEnd = $lineNumber;
                }
            }

            if (($eventLineEnd - $eventLine) <= 2) {
                $content = array_merge(array_slice($content, 0, $lineWithListener), [
                    // We need some amount of space between
                    "        // code: this is an autogenerated line",
                ], array_slice($content, $lineWithListener, count($content)));
            }

            $property->setValue(new Literal(implode("\n", $content)));
        });

        return $this;
    }

    public static function changeConfigValue(
        string $filePath,
        string $key,
        \Closure $closure
    ): void {
        $phpFile = PhpFile::fromCode(file_get_contents($filePath));

        dd(VarExporter::export([
            'hello'
        ]));
//        composer create-project wintercms/winter example.com "dev-develop"
    }

    public function formatClassWithClass(string $class)
    {
        return '/*(n*/'.$class.'::class';
    }

    public function removeImport($fqns)
    {
        $imports = is_array($fqns) ? $fqns : func_get_args();
        foreach ($this->phpFiles as $phpFile) {
            /**
             * @var string $namespaceName
             * @var PhpNamespace $namespace
             */
            foreach ($phpFile->getNamespaces() as $namespaceName => $namespace) {
                foreach ($imports as $importToRemove) {
                    $uses = $namespace->getUses();
                    if (!in_array($importToRemove, $uses)) {
                        // not already imported;
                        continue;
                    }

                    $namespace->removeUse($importToRemove);
                }
            }
        }

        return $this;
    }
}
